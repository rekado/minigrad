\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename minigrad.info
@documentencoding UTF-8
@settitle Minigrad Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2022 Ricardo Wurmus

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory Machine Learning
@direntry
* Minigrad: (minigrad).  Autograd neural net engine and graph library.
@end direntry

@titlepage
@title Minigrad Reference Manual
@author Ricardo Wurmus

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Minigrad

This document describes Minigrad version @value{VERSION}.

@menu
* Introduction::                What is this all about?
* Installation::                Installing Minigrad.
* Defining an Inductive Graph:: Show me what this looks like!

* GNU Free Documentation License::  The license of this manual.
* Concept Index::               Concepts.
* Programming Index::           Data types, functions, and variables.
@end menu

@c *********************************************************************
@node Introduction
@chapter Introduction

TODO

@c *********************************************************************
@node Installation
@chapter Installation

Use @command{guix shell -m manifest.scm} from the source directory to
enter a development environment.  After that tell Guile where to find
the graphviz bindings:

@example
export GUILE_EXTENSIONS_PATH=$GUIX_ENVIRONMENT/lib/guile/3.0/extensions
@end example

Minigrad uses the GNU build system.  To install it from a release
tarball just unpack it and run the usual commands:

@cindex installing from source
@cindex building from source
@example
./configure
make
make install
@end example

If you want to build the sources from the source repository you need to
bootstrap the build system first.  Run @code{autoreconf -vif} first and
then perform the above steps.


@c *********************************************************************
@node Defining an Inductive Graph
@chapter Defining an Inductive Graph

@lisp
(use-modules (minigrad dot)
             (minigrad graph)
             (minigrad libgv)
             (srfi srfi-26)
             (ice-9 match))

;; Construct a graph with graph-cons
(define my-graph/cons
  (let ((nodeA "A")
        (nodeB "B")
        (nodeC "C"))
    (graph-cons (context nodeC "C"
                         (list (link "C<-A" nodeA)
                               (link "C<-B" nodeB))
                         (list (link "C->A" nodeA)))
                (graph-cons (context nodeB "B" (list (link "B<-A" nodeA)) (list))
                            (graph-cons (context nodeA "A" (list) (list))
                                        graph-null)))))

;; Same thing with contexts->graph.
(define my-graph
  (let ((nodeA "A")
        (nodeB "B")
        (nodeC "C"))
    (contexts->graph
     (list (context nodeA "A" (list) (list))
           (context nodeB "B" (list (link "B<-A" nodeA)) (list))
           (context nodeC "C"
                    (list (link "C<-A" nodeA)
                          (link "C<-B" nodeB))
                    (list (link "C->A" nodeA)))))))

(draw my-graph)
@end lisp

@c *********************************************************************
@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@page

@c *********************************************************************
@node Concept Index
@unnumbered Concept Index

@printindex cp

@node Programming Index
@unnumbered Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@bye
